#inter arrival distributions and processing time

#old code # created elaad_env

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns 

file_path1 = r"/mnt/c/Users/s139501/CSV/open_transactions.csv"
file_path2 = r"/mnt/c/Users/s139501/CSV/open_metervalues.csv"

df1 = pd.read_csv(file_path1, delimiter=';', decimal=',')
df2 = pd.read_csv(file_path2, delimiter=';', decimal=',')

# Convert the columns to datetime
df1['UTCTransactionStart'] = pd.to_datetime(df1['UTCTransactionStart'], format='%d/%m/%Y %H:%M')
df1['UTCTransactionStop'] = pd.to_datetime(df1['UTCTransactionStop'], format='%d/%m/%Y %H:%M')

# Extract the hours and days
df1['ArrivalHour'] = df1['UTCTransactionStart'].dt.hour
df1['DepartureHour'] = df1['UTCTransactionStop'].dt.hour
df1['DayOfWeek'] = df1['UTCTransactionStart'].dt.dayofweek

# Segregate df1 into weekdays and weekends
df_weekdays = df1[df1['DayOfWeek'].between(0, 4)]
df_weekends = df1[df1['DayOfWeek'].between(5, 6)]

def plot_distribution(df, title_suffix):
    arrival_counts = df['ArrivalHour'].value_counts().sort_index()
    departure_counts = df['DepartureHour'].value_counts().sort_index()
    
    colors = sns.color_palette("Greens", len(arrival_counts))
    sorted_colors_arrival = [colors[i] for i in arrival_counts.argsort()]
    sorted_colors_departure = [colors[i] for i in departure_counts.argsort()]
    
    width = 0.4  # Width of the bars
    hours = range(24)
    arrival_positions = [hour - width/2 for hour in hours]
    departure_positions = [hour + width/2 for hour in hours]
    
    plt.figure(figsize=(12, 5))
    
    plt.bar(arrival_positions, arrival_counts.reindex(hours, fill_value=0), color=sorted_colors_arrival, width=width, label='Arrival', align='center')
    plt.bar(departure_positions, departure_counts.reindex(hours, fill_value=0), color=sorted_colors_departure, width=width, label='Departure', align='center')
    
    plt.title(f'Average Distribution over 24 Hours ({title_suffix})')
    plt.xlabel('Hour of Day')
    plt.ylabel('Count')
    plt.xticks(hours)
    plt.legend()
    plt.tight_layout()

# Plot distributions for weekdays and weekends
plot_distribution(df_weekdays, 'Weekdays')
plot_distribution(df_weekends, 'Weekends')

# Average energy consumed per hour for weekdays and weekends
df1['UTCTransactionStartHour'] = df1['UTCTransactionStart'].dt.hour
average_energy_weekdays = df_weekdays.groupby('UTCTransactionStartHour')['TotalEnergy'].mean()
average_energy_weekends = df_weekends.groupby('UTCTransactionStartHour')['TotalEnergy'].mean()

plt.figure(figsize=(12, 6))

colors_weekdays = sns.color_palette("Greens", len(average_energy_weekdays))
colors_weekends = sns.color_palette("Greens", len(average_energy_weekends))
sorted_colors_weekdays = [colors_weekdays[i] for i in average_energy_weekdays.argsort()]
sorted_colors_weekends = [colors_weekends[i] for i in average_energy_weekends.argsort()]

plt.subplot(1, 2, 1)
sns.barplot(x=average_energy_weekdays.index, y=average_energy_weekdays, palette=sorted_colors_weekdays)
plt.title('Average Energy Consumed Per Hour (Weekdays)')
plt.xlabel('Hour of Day')
plt.ylabel('Average Energy (kWh)')

plt.subplot(1, 2, 2)
sns.barplot(x=average_energy_weekends.index, y=average_energy_weekends, palette=sorted_colors_weekends)
plt.title('Average Energy Consumed Per Hour (Weekends)')
plt.xlabel('Hour of Day')
plt.ylabel('Average Energy (kWh)')

plt.tight_layout()
plt.show()
